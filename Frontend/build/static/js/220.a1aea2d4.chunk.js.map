{"version":3,"file":"static/js/220.a1aea2d4.chunk.js","mappings":"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","sources":["shared/components/FormElements/Button.js","shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/components/UIElements/Card.js","shared/components/UIElements/ErrorModal.js","shared/components/UIElements/Modal.js","shared/hooks/form-hook.js","shared/hooks/http-hook.js","shared/util/validators.js","user/pages/Auth.js"],"sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Button.css\";\n\nconst Button = (props) => {\n    if (props.href) {\n        return (\n            <a\n                className={`button button--${props.size || \"default\"} ${\n                    props.inverse && \"button--inverse\"\n                } ${props.danger && \"button--danger\"}`}\n                href={props.href}\n            >\n                {props.children}\n            </a>\n        );\n    }\n    if (props.to) {\n        return (\n            <Link\n                to={props.to}\n                exact={props.exact}\n                className={`button button--${props.size || \"default\"} ${\n                    props.inverse && \"button--inverse\"\n                } ${props.danger && \"button--danger\"}`}\n            >\n                {props.children}\n            </Link>\n        );\n    }\n    return (\n        <button\n            className={`button button--${props.size || \"default\"} ${\n                props.inverse && \"button--inverse\"\n            } ${props.danger && \"button--danger\"}`}\n            type={props.type}\n            onClick={props.onClick}\n            disabled={props.disabled}\n        >\n            {props.children}\n        </button>\n    );\n};\n\nexport default Button;\n","import React, { useRef, useState, useEffect } from \"react\";\n\nimport \"./ImageUpload.css\";\nimport Button from \"./Button\";\n\nconst ImageUpload = (props) => {\n    const [file, setFile] = useState();\n    const [previewUrl, setPreviewUrl] = useState();\n    const [isValid, setIsValid] = useState(false);\n\n    const filePickerRef = useRef();\n\n    const pickImageHandler = () => {\n        filePickerRef.current.click();\n    };\n\n    useEffect(() => {\n        if (!file) {\n            return;\n        }\n        const fileReader = new FileReader();\n        fileReader.onload = () => {\n            setPreviewUrl(fileReader.result);\n        };\n        fileReader.readAsDataURL(file);\n    }, [file]);\n\n    const pickedHandler = (event) => {\n        let pickedFile;\n        let fileIsValid = isValid;\n        if (event.target.files && event.target.files.length === 1) {\n            pickedFile = event.target.files[0];\n            setFile(pickedFile);\n            setIsValid(true);\n            fileIsValid = true;\n        } else {\n            setIsValid(false);\n            fileIsValid = false;\n        }\n        props.onInput(props.id, pickedFile, fileIsValid);\n    };\n    return (\n        <div className=\"form-control\">\n            <input\n                id={props.id}\n                ref={filePickerRef}\n                style={{ display: \"none\" }}\n                type=\"file\"\n                accept=\".jpg,.png,.jpeg\"\n                onChange={pickedHandler}\n            />\n            <div className={`image-upload ${props.center && \"center\"}`}>\n                <div className=\"image-upload__preview\">\n                    {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n                    {!previewUrl && <p>Please pick an image.</p>}\n                </div>\n                <Button type=\"button\" onClick={pickImageHandler}>\n                    PICK IMAGE\n                </Button>\n            </div>\n            {!isValid && <p>{props.errorText}</p>}\n        </div>\n    );\n};\n\nexport default ImageUpload;\n","import React, {useEffect, useReducer} from \"react\";\n\nimport { validate } from \"../../util/validators\";\n\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n    switch(action.type) {\n        case 'CHANGE' : \n            return {\n                ...state,\n                value : action.val,\n                isValid : validate(action.val, action.validators)\n            }\n        case 'TOUCH' :\n            return {\n                ...state,\n                isTouched : true\n            }\n        default :\n            return state;\n    }\n}\n\nconst Input = props => {\n    const [inputState, dispatch ] = useReducer(inputReducer , {value : props.initialValue || '', isTouched : false ,isValid : props.initialValid || false});\n\n    const {id,onInput} = props;\n    const {value,isValid} = inputState;\n\n    useEffect(() => {\n        onInput(id,value,isValid)\n    },[id,value,isValid,onInput]);\n\n\n    // const [enteredValue, setEnteredValue] = useState('');\n    // const [isValid, setIsValid] = useState(false);\n    const changeHandler = event => {\n        dispatch({type : 'CHANGE', val : event.target.value, validators : props.validators});\n    }\n\n    const touchHandler = () => {\n        dispatch({type : 'TOUCH'});\n    }\n\n    const element = props.element === 'input' ? (\n        <input id={props.id} type={props.type} placeholder={props.placeholder} onChange={changeHandler} value={inputState.value} onBlur={touchHandler}/>\n    ) : <textarea id = {props.id} rows={props.row || 3} onChange={changeHandler} value={inputState.value} onBlur={touchHandler}/>;\n\n    return <div className={`form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`}>\n        <label htmlFor={props.id}>{props.label}</label>\n        {element}\n        {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n};\n\nexport default Input;","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\n\nimport Modal from './Modal';\nimport Button from '../FormElements/Button';\n\nconst ErrorModal = props => {\n  return (\n    <Modal\n      onCancel={props.onClear}\n      header=\"An Error Occurred!\"\n      show={!!props.error}\n      footer={<Button onClick={props.onClear}>Okay</Button>}\n    >\n      <p>{props.error}</p>\n    </Modal>\n  );\n};\n\nexport default ErrorModal;\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport {CSSTransition} from 'react-transition-group';\n\nimport Backdrop from \"./Backdrop\";\nimport './Modal.css';\n\nconst ModalOverlay = props => {\n    const content = (\n        <div className={`modal ${props.className}`} style={props.style}>\n            <header className={`modal__header ${props.headerClass}`}>\n                <h2>{props.header}</h2>\n            </header>\n            <form onSubmit={props.onSubmit ? props.onSubmit : event => event.preventDefault()}>\n                <div className={`modal__content ${props.contentClass}`}>\n                    {props.children}\n                </div>\n                <footer className={`modal__footer ${props.footerClass}`}>\n                    {props.footer}\n                </footer>\n            </form>\n        </div>\n    );\n\n    return ReactDOM.createPortal(content,document.getElementById(\"modal-hook\"));\n};\n\nconst Modal = props => {\n    return <>\n        {props.show && <Backdrop onClick = {props.onCancel}/>}\n        <CSSTransition in={props.show} mountOnEnter unmountOnExit timeout={200} classNames=\"modal\">\n            <ModalOverlay {...props}/>\n        </CSSTransition>\n    </>\n};\n\nexport default Modal;","import { useCallback, useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n    switch (action.type) {\n        case \"INPUT_CHANGE\":\n            let formIsValid = true;\n            for (const inputId in state.inputs) {\n                if (!state.inputs[inputId]) {\n                    continue;\n                }\n                if (inputId === action.isValid) {\n                    formIsValid = formIsValid && action.isValid;\n                } else {\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\n                }\n            }\n            return {\n                ...state,\n                inputs: {\n                    ...state.inputs,\n                    [action.inputId]: {\n                        value: action.value,\n                        isValid: action.isValid,\n                    },\n                },\n                isValid: formIsValid,\n            };\n        case \"SET_DATA\":\n            return {\n                inputs: action.inputs,\n                isValid: action.formIsValid,\n            };\n        default:\n            return state;\n    }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n    const [formState, dispatch] = useReducer(formReducer, {\n        inputs: initialInputs,\n        isValid: initialFormValidity,\n    });\n\n    const inputHandler = useCallback((id, value, isValid) => {\n        dispatch({\n            type: \"INPUT_CHANGE\",\n            value: value,\n            isValid: isValid,\n            inputId: id,\n        });\n    }, []);\n\n    const setFormData = useCallback((inputData, formValidity) => {\n        dispatch({\n            type: \"SET_DATA\",\n            inputs: inputData,\n            formIsValid: formValidity,\n        });\n    }, []);\n\n    return [formState, inputHandler, setFormData];\n};\n","import { useState, useCallback, useRef, useEffect } from \"react\";\n\nexport const useHttpClient = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState();\n    const activeHttpRequests = useRef([]);\n\n    const sendRequest = useCallback(\n        async (url, method = \"GET\", body = null, headers = {}) => {\n            setIsLoading(true);\n            const httpAbortCntrl = new AbortController();\n            activeHttpRequests.current.push(httpAbortCntrl);\n            try {\n                const response = await fetch(url, {\n                    method,\n                    body,\n                    headers,\n                    signal: httpAbortCntrl.signal,\n                });\n\n                const responseData = await response.json();\n\n                activeHttpRequests.current = activeHttpRequests.current.filter(\n                    (reqCtrl) => reqCtrl !== httpAbortCntrl\n                );\n\n                if (!response.ok) {\n                    throw new Error(responseData.message);\n                }\n                setIsLoading(false);\n                return responseData;\n            } catch (err) {\n                setError(err.message);\n                setIsLoading(false);\n                throw err;\n            }\n        },\n        []\n    );\n    const clearError = () => {\n        setError(null);\n    };\n\n    useEffect(() => {\n        return () => {\n            activeHttpRequests.current.forEach((abortCntrl) =>\n                abortCntrl.abort()\n            );\n        };\n    }, []);\n\n    return { isLoading, error, sendRequest, clearError };\n};\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import React, { useState, useContext } from \"react\";\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nimport \"./Auth.css\";\nimport {\n    VALIDATOR_EMAIL,\n    VALIDATOR_MINLENGTH,\n    VALIDATOR_REQUIRE,\n} from \"../../shared/util/validators\";\n\nconst Auth = (props) => {\n    const auth = useContext(AuthContext);\n\n    const [isLoginMode, setIsLoginMode] = useState(true);\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n    const [formState, inputHandler, setFormData] = useForm(\n        {\n            email: {\n                value: \"\",\n                isValid: false,\n            },\n            password: {\n                value: \"\",\n                isValid: false,\n            },\n        },\n        false\n    );\n\n    const submitHandler = async (event) => {\n        event.preventDefault();\n\n        if (isLoginMode) {\n            try {\n                const responseData = await sendRequest(\n                    process.env.REACT_APP_BACKEND_URL + \"/users/login\",\n                    \"POST\",\n                    JSON.stringify({\n                        email: formState.inputs.email.value,\n                        password: formState.inputs.password.value,\n                    }),\n                    {\n                        \"Content-Type\": \"application/json\",\n                    }\n                );\n                auth.login(responseData.userId, responseData.token);\n            } catch (err) {}\n        } else {\n            try {\n                const formData = new FormData();\n                formData.append(\"email\", formState.inputs.email.value);\n                formData.append(\"name\", formState.inputs.name.value);\n                formData.append(\"password\", formState.inputs.password.value);\n                formData.append(\"image\", formState.inputs.image.value);\n                const responseData = await sendRequest(\n                    process.env.REACT_APP_BACKEND_URL + \"/users/signup\",\n                    \"POST\",\n                    formData\n                );\n                auth.login(responseData.userId, responseData.token);\n            } catch (err) {}\n        }\n    };\n\n    const switchModeHandler = () => {\n        if (!isLoginMode) {\n            setFormData(\n                {\n                    ...formState.inputs,\n                    name: undefined,\n                    image: undefined,\n                },\n                formState.inputs.email.isValid &&\n                    formState.inputs.password.isValid\n            );\n        } else {\n            setFormData(\n                {\n                    ...formState.inputs,\n                    name: {\n                        value: \"\",\n                        isValid: false,\n                    },\n                    image: {\n                        value: null,\n                        isValid: false,\n                    },\n                },\n                false\n            );\n        }\n        setIsLoginMode((prevMode) => !prevMode);\n    };\n\n    return (\n        <>\n            <ErrorModal error={error} onClear={clearError} />\n            <Card className=\"authentication\">\n                {isLoading && <LoadingSpinner asOverlay />}\n                <h2>Login Required</h2>\n                <hr />\n                <form onSubmit={submitHandler}>\n                    {!isLoginMode && (\n                        <Input\n                            element=\"input\"\n                            id=\"name\"\n                            type=\"text\"\n                            label=\"Your Name\"\n                            validators={[VALIDATOR_REQUIRE()]}\n                            errorText=\"Please enter a valid name.\"\n                            onInput={inputHandler}\n                        />\n                    )}\n                    {!isLoginMode && (\n                        <ImageUpload center id=\"image\" onInput={inputHandler} />\n                    )}\n                    <Input\n                        element=\"input\"\n                        id=\"email\"\n                        type=\"email\"\n                        label=\"E-mail\"\n                        validators={[VALIDATOR_EMAIL()]}\n                        errorText=\"Please enter a valid email address!\"\n                        onInput={inputHandler}\n                    />\n                    <Input\n                        element=\"input\"\n                        id=\"password\"\n                        type=\"password\"\n                        label=\"Password\"\n                        validators={[VALIDATOR_MINLENGTH(8)]}\n                        errorText=\"Please enter a valid password(atleast 8 characters)!\"\n                        onInput={inputHandler}\n                    />\n                    <Button type=\"submit\" disabled={!formState.isValid}>\n                        {isLoginMode ? \"LOGIN\" : \"SIGN UP\"}\n                    </Button>\n                </form>\n                <Button inverse onClick={switchModeHandler}>\n                    {!isLoginMode ? \"LOGIN\" : \"SIGN UP\"}\n                </Button>\n            </Card>\n        </>\n    );\n};\n\nexport default Auth;\n"],"names":["props","href","_jsx","className","concat","size","inverse","danger","children","to","Link","exact","type","onClick","disabled","file","setFile","useState","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","_jsxs","id","ref","style","display","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","center","src","alt","Button","pickImageHandler","current","click","errorText","inputReducer","state","action","value","val","validate","validators","isTouched","inputState","dispatch","useReducer","initialValue","initialValid","changeHandler","touchHandler","element","placeholder","onBlur","rows","row","htmlFor","label","Modal","onCancel","onClear","header","show","error","footer","ModalOverlay","content","headerClass","onSubmit","preventDefault","contentClass","footerClass","ReactDOM","document","getElementById","_Fragment","Backdrop","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","useHttpClient","isLoading","setIsLoading","setError","activeHttpRequests","sendRequest","async","url","method","arguments","undefined","body","headers","httpAbortCntrl","AbortController","push","response","fetch","signal","responseData","json","filter","reqCtrl","ok","Error","message","err","forEach","abortCntrl","abort","clearError","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","validator","trim","test","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","inputHandler","setFormData","email","password","ErrorModal","Card","LoadingSpinner","asOverlay","process","JSON","stringify","login","userId","token","formData","FormData","append","name","image","Input","ImageUpload","switchModeHandler","prevMode"],"sourceRoot":""}